No vídeo anterior, ao digitar composer install a nova dependência (Symfony DomCrawler) não foi instalada. 
O pacote só fui buscado pelo composer ao executar composer update.

Isso se dá pelo seguinte fato: O comando composer install lê o arquivo composer.lock e instala as exatas dependências lá definidas. 
No nosso caso, nós já tinhamos o arquivo criado, então o composer.lock foi lido e como não havia alterações, nada foi instalado.

Já o comando composer update lê o arquivo composer.json, instala as dependências mais atuais dentro das restrições definidas e atualiza o composer.lock.

Sendo assim, em um projeto em andamento (tendo o arquivo composer.lock), para instalarmos uma nova dependência precisamos executar o composer require ou após adicionar a dependência no arquivo composer.json executar o comando composer update.

----------------------------------------------------------------------------------------------------------------------------------------------------------------

Nesta aula, aprendemos: O que aprendemos?

O composer possui um repositório central de pacotes: https://packagist.org/
É possível configurar repositórios de outras fontes (do github, zip etc)
O pacotes guzzlehttp/guzzle serve para executar requisições HTTP de alto nível
Para instalar uma dependência (pacote) basta executar: composer require <nome do pacote>
Composer guarda as dependências e dependências transitivas na pasta vendor do projeto
O nome e versão da dependências fica salvo no arquivo composer.json
O comando require adiciona automaticamente a dependência no composer.json
O comando composer install automaticamente baixa todas as dependências do composer.lock (ou do composer.json, caso o .lock não exista ainda)
O arquivo composer.lock define todas as versões exatas instaladas
O composer já gera um arquivo autoload.php para facilitar o carregamento das dependências
Basta usar require vendor/autoload.php

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Nesta aula, aprendemos: O que aprendemos?

Conhecemos a PSR-4 (Autoloader)
A PSR-4 define um padrão para o carregamento automático de classes
O namespace da classe tem partes:
O vendor namespace (ou namespace padrão ou namespace prefixo)
O vendor namespace fica mapeado para uma pasta do projeto dentro do arquivo composer.json
Podemos ter um sub-namespace que precisa ser representado através de pastas
Para atualizar o arquivo autoload.php baseado no composer.json, podemos rodar o comando composer dumpautoload
Para classes que não seguem o PSR-4, podemos definir um classmap dentro do composer.json
Para carregar um biblioteca de funções automaticamente, podemos adicionar uma entrada files no composer.json

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Nesta aula, aprendemos: Nessa aula falamos sobre dependências e ferramentas que não são utilizadas em produção e sim no ambiente de desenvolvimento:

Através do flag --dev definimos que uma dependência não faz parte do ambiente de produção
Caso desejarmos baixar as dependências de "produção" apenas podemos usar o flag no-dev
Arquivos executáveis fornecidos por componentes instalados pelo composer ficam na pasta vendor/bin
Conhecemos três ferramentas do mundo PHP:
phpunit para rodar testes;
phpcs para verificar padrões de código;
phan para executar uma análise estática da sintaxe do nosso código.